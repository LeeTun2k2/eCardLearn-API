name: Deploy to Amazon EC2

on:
  push:
    branches: [ "production" ]
  pull_request:
    branches: [ "production" ]
env:
  AWS_REGION: ap-southeast-2
  EC2_IP_ADDRESS: "3.27.242.207"
  ECR_REPOSITORY: ecardlearn-api
  ECR_REGISTRY: 952043753825.dkr.ecr.ap-southeast-2.amazonaws.com
  CONTAINER_NAME: ecardlearn-api
  IMAGE_TAG: 95474e4ee4b159228169241bfde12ace81fe1fb1 #${{github.sha}}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Github Action
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{env.AWS_REGION}}

    - name: Github Action - Login to Amazon ECR
      id: github-login-ecr
      run: docker login -u AWS -p $(aws ecr get-login-password --region ${{env.AWS_REGION}}) ${{env.ECR_REGISTRY}}

    #- name: Build, tag, and push image to Amazon ECR
    #  id: build-image
    #  run: |
    #    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #    echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" 

    # EC2
    - name: SSH into EC2
      env:
        SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
      run: |
        echo "$SSH_PRIVATE_KEY" > private.pem
        chmod 600 private.pem
        
    - name: EC2 - Login to Amazon ECR
      id: ec2-login-ecr
      run: ssh -i private.pem -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" ec2-user@${{env.EC2_IP_ADDRESS}} 'docker login -u AWS -p $(aws ecr get-login-password --region ${{env.AWS_REGION}}) ${{env.ECR_REGISTRY}}'

    - name: Pull docker image to EC2
      run: ssh -i private.pem -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" ec2-user@${{env.EC2_IP_ADDRESS}} 'docker pull ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}'

    #- name: SSH into EC2 and pull Docker image
    #  env:
    #    SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
    #  run: |
    #    echo "$SSH_PRIVATE_KEY" > private.pem
    #    chmod 600 private.pem
    #    scp -i private.pem -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ec2-user@${{env.EC2_IP_ADDRESS}}:~/$ECR_REPOSITORY:latest
    #    ssh -i private.pem -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" ec2-user@${{env.EC2_IP_ADDRESS}} 'docker stop $ECR_REPOSITORY && docker rm $ECR_REPOSITORY && docker rmi $ECR_REPOSITORY:latest && docker load -i $ECR_REPOSITORY:latest'
    
    - name: Start Docker container on EC2
      run: |
        ssh -i private.pem -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" ec2-user@${{env.EC2_IP_ADDRESS}} 'docker run -d -p 80:80 --name ${{env.ECR_REPOSITORY}} ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}'
